/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  *
  * Copyright (c) 2017 STMicroelectronics International N.V. 
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without 
  * modification, are permitted, provided that the following conditions are met:
  *
  * 1. Redistribution of source code must retain the above copyright notice, 
  *    this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright notice,
  *    this list of conditions and the following disclaimer in the documentation
  *    and/or other materials provided with the distribution.
  * 3. Neither the name of STMicroelectronics nor the names of other 
  *    contributors to this software may be used to endorse or promote products 
  *    derived from this software without specific written permission.
  * 4. This software, including modifications and/or derivative works of this 
  *    software, must execute solely and exclusively on microcontroller or
  *    microprocessor devices manufactured by or for STMicroelectronics.
  * 5. Redistribution and use of this software other than as permitted under 
  *    this license is void and will automatically terminate your rights under 
  *    this license. 
  *
  * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f1xx_hal.h"
#include "cmsis_os.h"
#include "rtc.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */
#include "bsp_led.h"
#include "bsp_usart1.h"
#include "my_extrn_value.h"
#include "wdz_eeprom.h"
#include "bsp_stm_flash.h"
#include "my_time.h"

#include "wdz_m35.h"
#include "my_OS.h"
#include "my_globle_extern.h"

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
  
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void Error_Handler(void);
void MX_FREERTOS_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
//测试使用
	uint16_t my_FLASH_rx_buf1[100]={0};
	uint16_t my_FLASH_tx_buf1[100]={0};

extern  uint8_t my_UART1_Status;
extern uint16_t my_tim6_count;
	//串口1发
uint8_t my_usart1_tx_buf1[3096]={0x10,0x49,0x01,0x02,0x13,0x16};
extern uint16_t DTU_ADDRESS; //DTU的全局地址，2个字节 uint16_t MY_DTU_add
	
/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */
__IO	uint8_t my_SPI_rx_buf1[100]={0};
__IO	uint8_t my_SPI_tx_buf1[100]={0};

	int ii=0;
	
  ///__set_PRIMASK(1);

//关闭所有中断
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  MX_SPI1_Init();
  MX_RTC_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_SPI3_Init();
  MX_TIM6_Init();

  /* USER CODE BEGIN 2 */
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
//__set_PRIMASK(0); //打开所有中断
	//====LED和SPeaker启动
	LED1_ON;
	HAL_Delay(100);
	LED2_ON;
	HAL_Delay(100);
	LED3_ON;
	HAL_Delay(100);
	LED4_ON;
	HAL_Delay(100);
	LED5_ON;
	HAL_Delay(100);
	LED6_ON;
	HAL_Delay(1000);
	SPEAKER_ON;
	//digitalHi(GPIOC,GPIO_PIN_2);
	HAL_Delay(500);
	SPEAKER_OFF;
	LED1_OFF;
	LED2_OFF;
	LED3_OFF;
	LED4_OFF;
	LED5_OFF;
	LED6_OFF;
	//=======
	//测试

	
  //===串口启动
	USART_printf(&huart3,"\n123======system is reset!!=========123\n");
	USART_printf(&huart3,"===sysclockfreg==%d\n",HAL_RCC_GetSysClockFreq()/1000000);//读取系统时钟
	HAL_UART_Receive_IT(&huart3,&rsbuf3[rsbuf3pt_write],1);  //开启接收USART3函数
	
	HAL_UART_Receive_IT(&huart1,&rsbuf1[rsbuf1pt_write],1);  //开启串口1接接，对应M35	

	//===SPI1 对应EEPROM
	EEPROM_NSS1_OFF;
	EEPROM_NSS2_OFF;
	
  //单字节 测试EEPROM	
		for(ii=0;ii<76;ii++)
		{
			my_SPI_tx_buf1[ii]=ii+0X30;
			my_FLASH_tx_buf1[ii]=ii+0X30;
			AT25_WriteByte(my_SPI_tx_buf1[ii],ii);
		}
		for(ii=0;ii<76;ii++)
		{
			my_SPI_rx_buf1[ii]=AT25_ReadByte(ii);
		}
		USART_printf(&huart3,"[111]%s\n",my_SPI_rx_buf1);
	//块测试
    SPI_EE_BufferRead2((uint8_t *)my_SPI_rx_buf1,1000,76);	
    USART_printf(&huart3,"[222]%s\n",my_SPI_rx_buf1);
    SPI_EE_BufferWrite2((uint8_t *)my_SPI_tx_buf1,1000,76);
		SPI_EE_BufferRead2((uint8_t *)my_SPI_rx_buf1,1000,76);	
    USART_printf(&huart3,"[333]%s\n",my_SPI_rx_buf1);
		
		//内部STM FLASH测试
		
		STMFLASH_Read(FLASH_ReadAddress,my_FLASH_rx_buf1,100);
		printf("\nSTM-default read data\n");
		for(ii=0;ii<100;ii++)
		{
			printf("[%X]-",my_FLASH_rx_buf1[ii]);
		}
		  //my_SPI_rx_buf1[ii]=my_FLASH_rx_buf1[ii];
		//USART_printf(&huart3,"[STM-FLASH111=]%s\n",my_SPI_rx_buf1);
		//HAL_Delay(1000);
		
		STMFLASH_Write(FLASH_WriteAddress,my_FLASH_tx_buf1,76);	
		HAL_Delay(1000);
		
		STMFLASH_Read(FLASH_ReadAddress,my_FLASH_rx_buf1,100);	
		printf("\nSTM-write and read data\n");
		 for(ii=0;ii<100;ii++)
		{
			printf("[%X]-",my_FLASH_rx_buf1[ii]);
		}
		
		//TIM 计时开始
		
		
		
		HAL_TIM_Base_Stop_IT(&htim6);
		//测试TIM6，计时使用10ms计数一次，数值减一
		
		
		//====TIM END========
	
	  //====RTC=====
		
		
		//=====RTC END====
		
		
		//====SPI3 CC1101接口====
		//----CC1101
	 
	
	HAL_GPIO_WritePin(PORT_CC_CSN,PIN_CC_CSN,GPIO_PIN_SET);
	HAL_Delay(2000);
	HAL_GPIO_WritePin(PORT_CC_CSN,PIN_CC_CSN,GPIO_PIN_RESET);
	
	
	
	
	
	printf("GDO2_CONFIG-%X\n",CC1101ReadReg(CC1101_IOCFG2));
	printf("GDO1_CONFIG-%X\n",CC1101ReadReg(CC1101_IOCFG1));
	printf("GDO0_CONFIG-%X\n",CC1101ReadReg(CC1101_IOCFG0));
	
	CC1101Init();
	HAL_Delay(1000);
	
	printf("GDO2_CONFIG-%X\n",CC1101ReadReg(CC1101_IOCFG2));
	printf("GDO1_CONFIG-%X\n",CC1101ReadReg(CC1101_IOCFG1));
	printf("GDO0_CONFIG-%X\n",CC1101ReadReg(CC1101_IOCFG0));
	
	my_read_all_reg();
	
	//__HAL_GPIO_EXTI_CLEAR_IT(PIN_CC_IRQ);
	//HAL_NVIC_EnableIRQ(EXIT_CC_IRQ_GD0);
	
	//--------进入WOR模式,当前方式是利用按钮中断，开启WOR模式
   //EVE0=0X876A T0为1秒 ，当T0为0.5秒的时候，为0X876A的一半，0X43B5H  0.25秒0X21DA
	
			CC1101WriteCmd(CC1101_SIDLE); //进入空闲状态	
			CC1101WriteReg(CC1101_MCSM2,0X00); //写0x16 ,RX_TIME，写入0X00，设置接收时间限制，占空比问题00最高12%,如果没接收到数据，就进入SLEEP。			
			CC1101WriteReg(CC1101_MCSM0,0x18);  //0X18 	//
			CC1101WriteReg(CC1101_WOREVT1,0x87);  //0X1E,event0 高字节
			CC1101WriteReg(CC1101_WOREVT0,0x6A);   //0X1F event0 低字节
			CC1101WriteReg(CC1101_WORCTRL,0X78); //写0X20,0111 100,WOR_RES		
			//CC1101WriteCmd(CC1101_SWOR); //开启WOR模式  
	
	//---------进入接收模式
	
	CC1101SetIdle();
	CC1101WriteReg(CC1101_MCSM2,0X07); //写0x16 ,RX_TIME，写入0X07,设置没有时间限制，一致接收数据	
	CC1101SetTRMode(RX_MODE);           // 进入接收模式
	HAL_Delay(500);
	printf("after rx CC1101 status=[%X] \n",CC1101ReadStatus(CC1101_MARCSTATE));//0X01空闲，0X0D接收，0X13发送
	
	HAL_Delay(500);
	//---------初始化完成，开启接收中断，开启定时
	
  HAL_TIM_Base_Start_IT(&htim6);  //TIM6 1秒，定时器
	//HAL_NVIC_EnableIRQ(EXIT_CC_IRQ_GD0); //开启中断，接收/发送数据产生
//-------------

  
	
		//====SPI3 CC1101接口 end===
#if USE_INIT_M35==1		
		//M35联网程序
		//***手机模块M35控制***
	M35_EMERG_OFF;
	M35_PWR_OFF;
	M35_PWREN_CONTROL_OFF; //M35断电状态	
	HAL_Delay(1000);
	M35_PWREN_CONTROL_ON;  //M35上电，但没有开机
	M35_PWR_ON;      //高电平持续3秒左右，开机或者关机
	HAL_Delay(3000);
	M35_PWR_OFF;    //给个低电平，正常工作或者关机状态下为低电平
/*
初始化M35模块
*/
   //M35_PWREN_CONTROL_OFF; //给M35断电,调试433时开启，调试使用，正式使用屏蔽掉
	 my_init_m35(); //调试433时关闭

#endif
		//HAL_Delay(1000);
		//END
	
	my_speaker_long_voice(50);
	my_speaker_short_cycle_voice(4,25);
	
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();

  /* Start scheduler */
  osKernelStart();
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_Delay(2000);
		//CC1101SetTRMode(RX_MODE);           // 进入接收模式
		//printf("main CC1101 status=[%X] \n",CC1101ReadStatus(CC1101_MARCSTATE));
		
		LED1_TOGGLE;
		
		ii=my_at_senddata(my_usart1_tx_buf1);
		if(ii==1) printf("gprs is ok!=%d\n",my_usart1_tx_buf1[1]);
			else if(ii==0) printf("gprs is error!=%d\n",my_usart1_tx_buf1[1]);
		else
			printf("gprs is error GRPS=%d\n",ii);
		
		
		my_usart1_tx_buf1[1]++;
		if(my_UART1_Status==1)
		{
			MX_USART1_UART_Init();
			HAL_UART_Receive_IT(&huart1,&rsbuf1[rsbuf1pt_write],1);  //开启串口1接收
			my_UART1_Status=0;
			printf("usart1 is error!!\r\n");
		}
		
//		LED2_TOGGLE;
//		LED3_TOGGLE;
//		LED4_TOGGLE;
//		LED5_TOGGLE;
//		LED6_TOGGLE;
		
		
		
		
		
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM8 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
    HAL_IncTick();
  }
/* USER CODE BEGIN Callback 1 */

  if(htim==&htim6)
	{

		 	my_tim6_count++; //1秒钟的计时器
		if(my_tim6_count%10==0 && my_tim6_count!=0 && my_tim6_count>30)
		{

		}
	}
	
/* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
